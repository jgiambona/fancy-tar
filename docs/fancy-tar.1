.TH FANCY-TAR 1 "2024-12-19" "1.8.4" "1.8.4"
.SH NAME
fancy-tar, fancytar, ftar \- A modern, feature-rich tar wrapper with progress bars and encryption
.SH SYNOPSIS
.B fancy-tar
.RI [ options ]
.RI < files... >
.br
.B fancytar
.RI [ options ]
.RI < files... >
.br
.B ftar
.RI [ options ]
.RI < files... >
.SH DESCRIPTION
.B fancy-tar
is a modern wrapper around GNU tar that adds progress bars, encryption, and parallel compression support. It automatically uses parallel compression tools when available to speed up compression operations.
.SH COMPRESSION
The tool supports multiple compression methods and automatically uses parallel versions when available:
.TP
.B gzip
Default compression method. Uses pigz when available for parallel compression.
.TP
.B bzip2
Uses pbzip2 when available for parallel compression.
.TP
.B xz
Uses pxz when available for parallel compression.
.TP
.B 7z
Uses built-in parallel compression.
.TP
.B ZIP
Uses standard ZIP compression.
.SH ENCRYPTION
The tool supports multiple encryption methods:
.TP
.B GPG
Uses GPG for encryption. Output files will have a .gpg extension.
.TP
.B OpenSSL
Uses OpenSSL for encryption. Output files will have a .enc extension.
.TP
.B 7z
Uses built-in AES-256 encryption when a password is provided.
.TP
.B ZIP
Supports two encryption methods:
  • Native password protection (--password): Built into the zip file
  • GPG encryption (--encrypt): Creates zip, then encrypts with GPG (.zip.gpg)
.SH OPTIONS
.TP
.B \-o, \-\-output <file>
Specify output file name
.TP
.B \-n
Create uncompressed tar archive
.TP
.B \-s
Use slower but better compression
.TP
.B \-x, \-\-open-after
Open the output folder when done (supported on macOS and Linux)
.TP
.B \-t, \-\-tree
Show hierarchical file structure before archiving
.TP
.B \-\-no\-recurse
Do not include directory contents (shallow archive)
.TP
.B \-\-hash
Output SHA256 hash file alongside the archive
.TP
.B \-\-encrypt[=method]
Encrypt archive. Behavior varies by format:
  • tar/tar.gz: Use gpg (default) or openssl
  • 7z: Use built-in AES-256 encryption (same as --password)
  • zip: Create zip, then encrypt with GPG (.zip.gpg)
.TP
.B \-\-recipient <id>
Recipient ID for GPG public key encryption (can be specified multiple times for multiple recipients)
.TP
.B \-\-password <pass>
Password for encryption. Behavior varies by format:
  • tar/tar.gz: Used with --encrypt=gpg or --encrypt=openssl
  • 7z: Uses built-in AES-256 encryption
  • zip: Uses native password protection (built into zip file)
.TP
.B \-\-key-file <file>
Read encryption password from the first line of the specified file. Behavior varies by format:
  • tar/tar.gz: Used with --encrypt=gpg or --encrypt=openssl
  • 7z: Uses built-in AES-256 encryption
  • zip: Uses native password protection (built into zip file)
.TP
.B \-\-verify
Verify the archive after creation
.TP
.B \-\-split\-size=<size>
Split the archive into smaller parts (e.g., 100M, 1G)
.TP
.B \-\-zip
Create a .zip archive (with optional password)
.TP
.B \-\-7z
Create a .7z archive (with optional password)
.TP
.B \-\-compression=<0-9>
Set compression level (0=store, 9=ultra)
.TP
.B \-\-use=<tool>
Force specific compression tool (gzip, bzip2, xz, etc.)
.TP
.B \-\-print\-filename
Output only the final archive filename (useful for scripting)
.TP
.B -f, --force
Automatically overwrite any existing output file or split parts without prompting. Useful for scripting or automation.
.TP
.B \-\-manifest <format>
Generate a manifest file listing the contents of the archive in the specified format. Formats:
  tree     - Hierarchical tree view of files in the archive
  text     - Flat list of all files in the archive
  csv      - CSV with columns: Path, Compressed Size, Uncompressed Size, Compression Ratio, File Type, Depth, Attributes, Timestamp
  csvhash  - Like csv, but also includes a SHA256 hash per file (computed by extracting each file to a temp dir and hashing it)
.TP
.B \-\-exclude <pattern>
Exclude files matching the given pattern (can be used multiple times)
.TP
.B \-\-include <pattern>
Include only files matching the given pattern (can be used multiple times)
.TP
.B \-\-files-from <file>
Read list of files to include from a file (one per line; supports glob patterns)
.TP
.B \-\-verbose
Show each file being processed with file count display [001/234]. When not used, only the progress bar is shown (default behavior).
.TP
.B \-\-debug
Enable debug output and show all commands being executed (compression, encryption, splitting, verification, etc.)
.SH PROGRESS REPORTING
The tool shows detailed progress information including:
.IP \(bu 2
Total file count and size
.IP \(bu 2
Current progress with percentage
.IP \(bu 2
Transfer speed
.IP \(bu 2
Estimated time remaining
.IP \(bu 2
Final compression ratio
.SH SECURITY
GPG and OpenSSL provide strong encryption. ZIP password protection is insecure and should not be used for sensitive files. 7z archives use AES-256 encryption when a password is provided.
.SH EXAMPLES
.TP
Create and verify a split archive:
.B
fancy-tar 1.8.0folder --split-size=100M --verify -o archive.tar.gz
.TP
Exclude all .log and .tmp files:
.B
fancy-tar project/ --exclude="*.log" --exclude="*.tmp" -o project.tar.gz
.TP
Include only .txt and .md files:
.B
fancy-tar docs/ --include="*.txt" --include="*.md" -o docs.tar.gz
.TP
Use a file list (one file or pattern per line):
.B
echo -e "src/*.c\nsrc/*.h\nREADME.md" > filelist.txt
.br
fancy-tar --files-from filelist.txt -o sources.tar.gz
.TP
Create a 7z archive with high compression:
.B
fancy-tar 1.8.0folder --7z --compression=9 -o archive.7z
.TP
Encrypt using GPG (symmetric):
.B
fancy-tar 1.8.0folder --encrypt=gpg
.TP
Encrypt with GPG for multiple recipients:
.B
fancy-tar secret/ --encrypt=gpg --recipient user1@example.com --recipient user2@example.com -o secret.tar.gz
.TP
Encrypt with OpenSSL:
.B
fancy-tar 1.8.0folder --encrypt=openssl --password secret
.TP
Encrypt with password from file:
.B
fancy-tar secret/ --encrypt=openssl --key-file /path/to/password.txt -o secret.tar.gz
.TP
ZIP archive with native password protection:
.B
fancy-tar 1.8.0folder --zip --password secret
.TP
ZIP archive with GPG encryption (creates .zip.gpg):
.B
fancy-tar 1.8.0folder --zip --encrypt
.TP
Exclude files from zip archive:
.B
fancy-tar project/ --exclude="*.log" --exclude="*.tmp" --zip -o project.zip
.TP
Include only specific files in 7z archive:
.B
fancy-tar docs/ --include="*.txt" --include="*.md" --7z -o docs.7z
.SH VERSION
fancy-tar 1.8.3
.SH SEE ALSO
.BR tar (1),
.BR gzip (1),
.BR bzip2 (1),
.BR xz (1),
.BR pigz (1),
.BR pbzip2 (1),
.BR pxz (1),
.BR 7z (1),
.BR zip (1)
.SH AUTHOR
Written by Jason Giambona <jason.giambona@gmail.com>
.SH COPYRIGHT
Copyright © 2024 Jason Giambona
This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.SH SPLIT ARCHIVES
When using --split-size, the archive will be split into multiple parts. After creation, the script prints clear instructions for reassembling and extracting your archive:

Every time an archive is split, a <output>.parts.txt file is created listing all split parts and their sizes (in bytes).
If --hash is used with split archives, a <output>.parts.sha256 file is created with SHA256 hashes for each part. A warning is printed that these are for individual parts, not the reassembled archive. To verify the full archive, reassemble all parts and hash the combined file.

For tar-based archives:
  cat split.tar.gz* > combined.tar.gz
  gzip -t combined.tar.gz   # or   tar -tf combined.tar.gz
  tar -xzf combined.tar.gz

For 7z archives:
  7z x split.7z.001
  (Make sure all .7z.0* parts are present in the same directory)

For zip archives:
  zip -F split.zip --out combined.zip
  unzip combined.zip
